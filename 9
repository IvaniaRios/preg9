{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP0aQfGQGo9pln1GXxCSFKg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Problema de la Mochila (o Knapsack Problem)"],"metadata":{"id":"94trxRrQJEOI"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G49Ckxq9-vB3","executionInfo":{"status":"ok","timestamp":1728220717044,"user_tz":240,"elapsed":9695,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"72940069-a3a2-4c7b-9866-f67bee62be5b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting deap\n","  Downloading deap-1.4.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from deap) (1.26.4)\n","Downloading deap-1.4.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (135 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.4/135.4 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: deap\n","Successfully installed deap-1.4.1\n"]}],"source":["!pip install deap\n"]},{"cell_type":"code","source":["import random\n","from deap import base, creator, tools, algorithms\n","\n","# Definimos el problema\n","NUM_ARTICULOS = 16 # Número de artículos\n","LIMITE_PESO = 50    # Peso máximo que puede llevar\n","\n","# Lista de artículos con (nombre, valor(de 1 a 100), peso(kg))\n","articulos = [\n","    (\"Enlatados\", 80, 5),\n","    (\"cereales\", 80, 7),\n","    (\"Cocina\", 80, 15),\n","    (\"Mesa\", 70, 17),\n","    (\"Cama\", 100, 3),\n","    (\"crema_sola\", 50, 1),\n","    (\"ropas\", 100, 5),\n","    (\"Cama\", 100, 3),\n","    (\"Cuchara\", 50, 1),\n","    (\"Cuchillo\", 70, 1),\n","    (\"garrafa\", 60, 7),\n","    (\"Celular\", 100, 1),\n","    (\"Cargador Solar\", 100, 10),\n","    (\"Crema Dental\", 70, 1),\n","    (\"Cepillo\", 75, 1),\n","    (\"Fósforo\", 100, 1),\n","]\n","\n","# Creamos un tipo para el problema de maximización\n","creator.create(\"AptitudMax\", base.Fitness, weights=(1.0,))  # Tipo de aptitud para maximización\n","creator.create(\"Individuo\", list, fitness=creator.AptitudMax)  # Tipo de individuo\n","\n","# Función para calcular el valor y el peso total de un individuo\n","def evaluar(individuo):\n","    # Calcular el valor total de los artículos seleccionados\n","    valor_total = sum(articulos[i][1] for i in range(len(individuo)) if individuo[i] == 1)\n","    # Calcular el peso total de los artículos seleccionados\n","    peso_total = sum(articulos[i][2] for i in range(len(individuo)) if individuo[i] == 1)\n","\n","    # Penalizar si el peso excede el límite\n","    if peso_total > LIMITE_PESO:\n","        return 0,  # Devuelve 0 como aptitud si se excede el peso\n","    return valor_total,  # Devuelve el valor total como aptitud\n","\n","# Inicializamos la población\n","toolbox = base.Toolbox()\n","toolbox.register(\"cero_uno\", random.randint, 0, 1)  # Registro de función para obtener 0 o 1\n","toolbox.register(\"individuo\", tools.initRepeat, creator.Individuo, toolbox.cero_uno, NUM_ARTICULOS)\n","toolbox.register(\"poblacion\", tools.initRepeat, list, toolbox.individuo)\n","toolbox.register(\"evaluar\", evaluar)  # Registro de la función de evaluación\n","toolbox.register(\"cruzar\", tools.cxTwoPoint)  # Registro de la función de cruce\n","toolbox.register(\"mutar\", tools.mutFlipBit, indpb=0.05)  # Registro de la función de mutación\n","toolbox.register(\"seleccionar\", tools.selTournament, tournsize=3)  # Registro de la función de selección\n","\n","# Función principal\n","def main():\n","    poblacion = toolbox.poblacion(n=100)  # Crear población inicial\n","    NUM_GENERACIONES = 50  # Número de generaciones\n","\n","    for gen in range(NUM_GENERACIONES):\n","        # Evaluar la población\n","        aptitudes = list(map(toolbox.evaluar, poblacion))\n","\n","        for ind, fit in zip(poblacion, aptitudes):\n","            ind.fitness.values = fit  # Asignar valores de aptitud\n","\n","        # Seleccionar individuos para la siguiente generación\n","        descendencia = toolbox.seleccionar(poblacion, len(poblacion))\n","        descendencia = list(map(toolbox.clone, descendencia))\n","\n","        # Aplicar cruce y mutación\n","        for hijo1, hijo2 in zip(descendencia[::2], descendencia[1::2]):\n","            if random.random() < 0.5:  # Probabilidad de cruce\n","                toolbox.cruzar(hijo1, hijo2)\n","                del hijo1.fitness.values\n","                del hijo2.fitness.values\n","\n","        for mutante in descendencia:\n","            if random.random() < 0.2:  # Probabilidad de mutación\n","                toolbox.mutar(mutante)\n","                del mutante.fitness.values\n","\n","        # Reemplazar la población\n","        poblacion[:] = descendencia\n","\n","    # Obtener el mejor individuo\n","    aptitudes = [ind.fitness.values[0] for ind in poblacion if ind.fitness.valid]\n","    if not aptitudes:  # Manejar el caso donde no hay aptitud válida\n","        return None, None\n","\n","    mejor_idx = aptitudes.index(max(aptitudes))\n","    mejor_ind = poblacion[mejor_idx]\n","    return mejor_ind, articulos\n","\n","if __name__ == \"__main__\":\n","    mejor_individuo, articulos = main()\n","    print(\"Artículos disponibles:\")\n","    print(articulos)\n","    if mejor_individuo is not None:\n","        print(\"\\nMejor combinación de artículos (1 significa incluir, 0 significa excluir):\")\n","        print(mejor_individuo)\n","        valor_total = sum(articulos[i][1] for i in range(len(mejor_individuo)) if mejor_individuo[i] == 1)\n","        peso_total = sum(articulos[i][2] for i in range(len(mejor_individuo)) if mejor_individuo[i] == 1)\n","\n","        # Mostrar los artículos seleccionados\n","        articulos_seleccionados = [articulos[i][0] for i in range(len(mejor_individuo)) if mejor_individuo[i] == 1]\n","\n","        print(f\"\\nArtículos seleccionados: {', '.join(articulos_seleccionados)}\")\n","        print(f\"Valor total: {valor_total}, Peso total: {peso_total}\")\n","    else:\n","        print(\"No se encontró una solución válida.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hPxWyrV_-1Xw","executionInfo":{"status":"ok","timestamp":1728223286333,"user_tz":240,"elapsed":338,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"4658e80e-bc16-47ed-c447-bedbc248decd"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Artículos disponibles:\n","[('Enlatados', 80, 5), ('cereales', 80, 7), ('Cocina', 80, 15), ('Mesa', 70, 17), ('Cama', 100, 3), ('crema_sola', 50, 1), ('ropas', 100, 5), ('Cama', 100, 3), ('Cuchara', 50, 1), ('Cuchillo', 70, 1), ('garrafa', 60, 7), ('Celular', 100, 1), ('Cargador Solar', 100, 10), ('Crema Dental', 70, 1), ('Cepillo', 75, 1), ('Fósforo', 100, 1)]\n","\n","Mejor combinación de artículos (1 significa incluir, 0 significa excluir):\n","[1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]\n","\n","Artículos seleccionados: Enlatados, Cocina, Cama, crema_sola, ropas, Cama, Cuchara, Cuchillo, Celular, Cargador Solar, Crema Dental, Cepillo, Fósforo\n","Valor total: 1075, Peso total: 48\n"]}]},{"cell_type":"markdown","source":["# Explicación del Resultado\n","Para optimizar el problema de seleccionar artículos y maximizar el valor total que se puede llevar, se deben considerar dos aspectos fundamentales: el valor total de los artículos seleccionados y el peso total, el cual no puede exceder un límite específico, en este caso, 50 kg.\n","\n","# Objetivo de Maximización del Valor:\n","\n","La solución obtenida presenta un valor total de 1075, lo que significa que hemos elegido una combinación de artículos que, en conjunto, proporcionan el mayor beneficio en términos de valor. Este fue el objetivo principal de la optimización: maximizar el valor de los artículos que se pueden transportar.\n","Cumplimiento del Límite de Peso:\n","\n","A pesar de la selección de varios artículos, el peso total calculado es de 48 kg, lo que se encuentra dentro del límite establecido de 50 kg. Esto indica un uso eficiente del espacio disponible, ya que se seleccionaron artículos que, a pesar de su variedad, no sobrepasan el peso permitido.\n","Diversidad en la Selección de Artículos:\n","\n","La solución incluye una variedad de artículos, como Enlatados, Cama, y Celular, que poseen diferentes valores y pesos. Esta diversidad sugiere que se tomaron decisiones estratégicas al seleccionar los mejores artículos disponibles para maximizar el valor sin comprometer el peso total permitido.\n","Prioridad en la Selección:\n","\n","Se observó que algunos artículos tienen un alto valor, pero también un peso considerable. La combinación seleccionada muestra que se priorizaron aquellos artículos que, aunque pesaban menos, contribuían de manera significativa al valor total."],"metadata":{"id":"vbF7AVs6LGno"}},{"cell_type":"code","source":[],"metadata":{"id":"rBv-mp6NLGXh"},"execution_count":null,"outputs":[]}]}